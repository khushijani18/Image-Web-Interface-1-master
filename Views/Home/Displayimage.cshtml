@model Image.Models.displayimage

@{
//Styles.Render("~/Content/css");
//Scripts.Render("~/bundles/modernizr");

//Scripts.Render("~/bundles/jquery");


//Styles.Render("~/bundles/selectareas");
//Scripts.Render("~/Scripts/jquery-3.4.1.js");
//Scripts.Render("~/bundles/bootstrap");
}

<html>
<head>

    @Scripts.Render("~/Scripts/jquery-3.2.1.js")
    @Scripts.Render("~/Scripts/jquery.selectareas.js")      



    <style>

        .next {
            color: black;
            font-size: 20px;
            padding: 10px 20px;
            border-radius: 10px 10px 10px;
            background-color: lightgreen;
        }

        .pre {
            color: black;
            font-size: 20px;
            padding: 10px 20px;
            background-color: lightgreen;
            border-radius: 10px 10px 10px;
        }

        .set {
            color: white;
            font-size: 20px;
            padding: 10px 20px;
            background-color: hotpink;
            border-radius: 10px 10px 10px;
        }

        .val {
            color: brown;
            font-size: 16px;
            padding: 10px 20px;
            background-color: lightblue;
            border-radius: 10px 10px 10px;
        }

        .autocomplete {
            position: relative;
            display: inline-block;
        }

        input {
            border: 1px solid transparent;
            background-color: #f1f1f1;
            padding: 10px;
            font-size: 16px;
        }

            input[type=text] {
                background-color: #f1f1f1;
                width: 100%;
            }



        .autocomplete-items {
            position: absolute;
            border: 1px solid #d4d4d4;
            border-bottom: none;
            border-top: none;
            z-index: 99;
            /position the autocomplete items to be the same width as the container:/ top: 100%;
            left: 0;
            right: 0;
        }

            .autocomplete-items div {
                padding: 10px;
                cursor: pointer;
                background-color: #fff;
                border-bottom: 1px solid #d4d4d4;
            }

        /when hovering an item:/
        .autocomplete-items div:hover {
            background-color: #e9e9e9;
        }

        /when navigating through the items using the arrow keys:/
        .autocomplete-active {
            background-color: DodgerBlue !important;
            color: #ffffff;
        }

        .img {
            max-width: 100%;
        }
    </style>

    <script type="text/javascript">

        console.log("In Script");

        var imgNaturalHeight = 0;
        var imgNaturalWidth = 0;
        var resizedHeight = 0;
        var resizedWidth = 0;
        var currentAreaId = -1;
        var currentArea = null;
        var areaChanged = "false";

        $(document).ready(function () {

            console.log("Document is ready");

            //Fired when the image is loaded for the first time
            $("#ImageToProcess").on('load', function () {

                console.log("Image Loaded");

                var array = new Array(($('#ImageToProcess').val()).split("~"));
                console.log(array);

                //To make image rectangle selectable
                $("#ImageToProcess").selectAreas({
                    allowEdit: true,
                    allowMove: true,
                    allowSelect: true,
                    allowNudge: false,
                    aspectRatio: 0,
                    onChanged: OnAreaChanged,
                    outlineOpacity: 1,
                    overlayOpacity: 0.6,
                    onDeleted: OnAreaDeleted,
                    minSize: [15, 15],
                });

                console.log("Image is area selectable");

                for (var i = 0; i < array[0].length; i++) {
                    console.log("Array :- " + array[0][i]);
                    var coordinates = new Array((String(array[0][i])).split(","));
                    console.log("Coordinates :- " + coordinates);
                    var option = {
                        id: parseInt(coordinates[0][0]),
                        x: parseInt(coordinates[0][1]),
                        y: parseInt(coordinates[0][2]),
                        width: parseInt(coordinates[0][3]),
                        height: parseInt(coordinates[0][4]),
                        tag: coordinates[0][5],
                    };
                    $("#ImageToProcess").selectAreas('add', option);
                }
            });
            //FIred When New selection is made or previous selection is selected
            $('#ImageToProcess').on("changed", function (event, id, areas) {
                areaChanged = true;
                $('#AreaChange').val() = "true";
                console.log(id + " :- Area changed in external method");
            });
            function OnAreaChanged(event, id, areas) {
                console.log(id + "Area Is changed...");
                console.log(areas);
            }

            function OnAreaDeleted(event, id, areas) {
                console.log(id + "Area is deleted");
                console.log(areas);
            }



        });
    </script>
</head>
<body>


    <div class="column">
        <div class="col-xs-12 col-md-9">
            <div class="img">
                <img src="~/Content/bottleship1.jpeg" id="ImageToProcess" height="450" />
            </div>
        </div>
    </div><br />

    @*<button id="PreviousImage" OnClick="PreviousImage_Click">Previous Image</button>

        <button id="NextImage" OnClick="NextImage_Click">Next Image</button>
        <br />

        <select>
            <option>---Select---</option>
            <option>Cat</option>
            <option>Dog</option>
        </select>
        <br />

        <button>Set Tag</button>
        <br />

        <button id="UploadData" OnClick="UploadData_Click">Validate and go to next image</button>
        <br />

        <asp:HiddenField ID="ImageAreas" runat="server" />
        <asp:HiddenField ID="AreaChange" runat="server" />*@
    <!-- Stack the columns on mobile by making one full-width and the other half-width -->
    <div class="column">
        <div class="col-xs-5 col-sm-2"><button class="pre">Previous</button></div>
        <div class="col-xs-8 col-sm-1"><button class="next">Next</button></div><br /><br /><br />
        <div class="col-xs-2 col-sm-3">
            <div class="autocomplete" style="width:300px;">
                <input id="myInput" type="text" name="myCountry">

            </div>


            <script>
                function autocomplete(inp, arr) {
                    /*the autocomplete function takes two arguments,
                    the text field element and an array of possible autocompleted values:*/
                    var currentFocus;
                    /execute a function when someone writes in the text field:/
                    inp.addEventListener("input", function (e) {
                        var a, b, i, val = this.value;
                        /close any already open lists of autocompleted values/
                        closeAllLists();
                        if (!val) { return false; }
                        currentFocus = -1;
                        /create a DIV element that will contain the items (values):/
                        a = document.createElement("DIV");
                        a.setAttribute("id", this.id + "autocomplete-list");
                        a.setAttribute("class", "autocomplete-items");
                        /append the DIV element as a child of the autocomplete container:/
                        this.parentNode.appendChild(a);
                        /for each item in the array.../
                        for (i = 0; i < arr.length; i++) {
                            /check if the item starts with the same letters as the text field value:/
                            if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                                /create a DIV element for each matching element:/
                                b = document.createElement("DIV");
                                /make the matching letters bold:/
                                b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                                b.innerHTML += arr[i].substr(val.length);
                                /insert a input field that will hold the current array item's value:/
                                b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                                /execute a function when someone clicks on the item value (DIV element):/
                                b.addEventListener("click", function (e) {
                                    /insert the value for the autocomplete text field:/
                                    inp.value = this.getElementsByTagName("input")[0].value;
                                    /*close the list of autocompleted values,
                                    (or any other open lists of autocompleted values:*/
                                    closeAllLists();
                                });
                                a.appendChild(b);
                            }
                        }
                    });
                    /execute a function presses a key on the keyboard:/
                    inp.addEventListener("keydown", function (e) {
                        var x = document.getElementById(this.id + "autocomplete-list");
                        if (x) x = x.getElementsByTagName("div");
                        if (e.keyCode == 40) {
                            /*If the arrow DOWN key is pressed,
                            increase the currentFocus variable:*/
                            currentFocus++;
                            /and and make the current item more visible:/
                            addActive(x);
                        } else if (e.keyCode == 38) { //up
                            /*If the arrow UP key is pressed,
                            decrease the currentFocus variable:*/
                            currentFocus--;
                            /and and make the current item more visible:/
                            addActive(x);
                        } else if (e.keyCode == 13) {
                            /If the ENTER key is pressed, prevent the form from being submitted,/
                            e.preventDefault();
                            if (currentFocus > -1) {
                                /and simulate a click on the "active" item:/
                                if (x) x[currentFocus].click();
                            }
                        }
                    });
                    function addActive(x) {
                        /a function to classify an item as "active":/
                        if (!x) return false;
                        /start by removing the "active" class on all items:/
                        removeActive(x);
                        if (currentFocus >= x.length) currentFocus = 0;
                        if (currentFocus < 0) currentFocus = (x.length - 1);
                        /add class "autocomplete-active":/
                        x[currentFocus].classList.add("autocomplete-active");
                    }
                    function removeActive(x) {
                        /a function to remove the "active" class from all autocomplete items:/
                        for (var i = 0; i < x.length; i++) {
                            x[i].classList.remove("autocomplete-active");
                        }
                    }
                    function closeAllLists(elmnt) {
                        /*close all autocomplete lists in the document,
                        except the one passed as an argument:*/
                        var x = document.getElementsByClassName("autocomplete-items");
                        for (var i = 0; i < x.length; i++) {
                            if (elmnt != x[i] && elmnt != inp) {
                                x[i].parentNode.removeChild(x[i]);
                            }
                        }
                    }
                    /execute a function when someone clicks in the document:/
                    document.addEventListener("click", function (e) {
                        closeAllLists(e.target);
                    });
                }
                var tags = ["dog", "cat", "mouse"];
                autocomplete(document.getElementById("myInput"), tags);
            </script>
        </div><br /><br />
        <div class="col-xs-3 col-sm-2"></div>
    </div>

    <!-- Columns start at 50% wide on mobile and bump up to 33.3% wide on desktop -->
    <div class="row">
        <div class="col-xs-6 col-sm-2"></div><br /><br />
        <div class="col-xs-6 col-sm-2"><button class="set">Set tag</button></div><br /><br />
        <div class="col-xs-6 col-sm-2"></div><br /><br />
        <div class="col-xs-7 col-md-3"><button class="val">Validate and go to next image</button></div>
    </div>

</html>